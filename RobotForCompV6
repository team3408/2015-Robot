/********************************************THIS CODE USES OUR NEW CONTROLLERS********************************************/


#include "WPILib.h"
#include <iostream>
#include <math.h>

class Robot: public IterativeRobot
{
  //DoubleSolenoids to push the bins out of the robot
  DoubleSolenoid solenoid1;
  DoubleSolenoid solenoid2;

  //limitswitches for linear lift
  DigitalInput *topLeftSwitch;
  DigitalInput *bottomLeftSwitch;
  DigitalInput *topRightSwitch;
  DigitalInput *bottomRightSwitch;
  DigitalInput *autonomousSwitch1;
  DigitalInput *autonomousSwitch2;

  //list of motors being used for driving
  CANTalon frontLeftDrive;
  CANTalon frontRightDrive;
  CANTalon backLeftDrive;
  CANTalon backRightDrive;

  //list of motors on claws of doom
  CANTalon leftClaw;
  CANTalon rightClaw;

  //the variable that controls the robot drive
  RobotDrive myRobot; // robot drive system

  //2 joysticks are used in competition
  Joystick buttonStick;
  Joystick driveStick;

  LiveWindow *lw;
  int autoLoopCounter;
int functionNumber;
public:
	Robot() :
		//use commas here and initiate them in the same order as above
		solenoid1(1,2),
		solenoid2(5,6),

		frontLeftDrive(56),
		frontRightDrive(52),
		backLeftDrive(57),
		backRightDrive(53),

		leftClaw(51),
		rightClaw(57),

		//we need to keep this because it is necessary for the whole robot to function
		myRobot(0, 1),

		buttonStick(0),
		driveStick(1),

		lw(NULL),
		autoLoopCounter(0)

	{
		myRobot.SetExpiration(0.1);
	}

private:
	void RobotInit()
	{
		//The code to initialize many of the inputs
		topLeftSwitch = new DigitalInput(0);
		bottomLeftSwitch = new DigitalInput(1);
		topRightSwitch = new DigitalInput(2);
		bottomRightSwitch = new DigitalInput(3);
		autonomousSwitch1 = new DigitalInput(4);
		autonomousSwitch2 = new DigitalInput(5);
		lw = LiveWindow::GetInstance();
	}

	void AutonomousInit()
	{
		float claws = 1;
		float pivotLeft = 2;
		float pivotRight = 3;
		float driveForwardLong = 4;
		float driveForwardShort = 5;
		autoLoopCounter = 0;
		if (autonomousSwitch1->Get() == 0 && autonomousSwitch2->Get() == 0) {
			functionNumber = 1;
		}
		else if(autonomousSwitch1->Get() == 1 && autonomousSwitch2->Get() == 1){
		 	functionNumber = 2;
		}
		else if (autonomousSwitch1->Get() == 0 && autonomousSwitch2->Get() == 1){
			functionNumber = 3;
		}
		else if (autonomousSwitch1->Get() == 1 && autonomousSwitch2->Get() == 0){
			functionNumber = 4;
		}
		else {
			functionNumber = 0;
		}
	}

	void AutonomousPeriodic()
	{

		  if (functionNumber == 1){
		  /**************************************FIRST FUNCTION******************************************/
			//just drive forward
			if (autoLoopCounter < driveForwardShort){
				frontLeftDrive.Set(-.25);
				frontRightDrive.Set(.25);
				backLeftDrive.Set(.25);
				backRightDrive.Set(-.25);
				autoLoopCounter++;
			}
			//set all motors to stop
			else{
				frontLeftDrive.Set(0);
				frontRightDrive.Set(0);
				backLeftDrive.Set(0);
				backRightDrive.Set(0);
				autoLoopCounter++;
			}
		  }
		else if (functionNumber == 2){
			/********************************SECOND FUNCTION**********************************************/
			//pick up tote and bin
			//pick up
			if (autoLoopCounter < claws){
				leftClaw.Set(.25);
				rightClaw.Set(.25);
				frontLeftDrive.Set(0);
				frontRightDrive.Set(0);
				backLeftDrive.Set(0);
				backRightDrive.Set(0);
				autoLoopCounter++;
			}
			//drive forward
			else if (autoLoopCounter >= claws && autoLoopCounter < driveForwardShort){
				leftClaw.Set(0);
				rightClaw.Set(0);
				frontLeftDrive.Set(-.25);
				frontRightDrive.Set(.25);
				backLeftDrive.Set(.25);
				backRightDrive.Set(-.25);
				autoLoopCounter++;
			}
			//move down over second item
			else if (autoLoopCounter >= driveForwardShort && autoLoopCounter < claws){
				leftClaw.Set(.25);
				rightClaw.Set(.25);
				frontLeftDrive.Set(0);
				frontRightDrive.Set(0);
				backLeftDrive.Set(0);
				backRightDrive.Set(0);
				autoLoopCounter++;
			}
			//pick up tote
			else if (autoLoopCounter >= claws && autoLoopCounter < claws){
				leftClaw.Set(-.25);
				rightClaw.Set(-.25);
				frontLeftDrive.Set(0);
				frontRightDrive.Set(0);
				backLeftDrive.Set(0);
				backRightDrive.Set(0);
				autoLoopCounter++;
			}
			//pivot
			else if (autoLoopCounter >= claws && autoLoopCounter < pivotLeft){
				leftClaw.Set(0);
				rightClaw.Set(0);
				frontLeftDrive.Set(.25);
				frontRightDrive.Set(.25);
				backLeftDrive.Set(.25);
				backRightDrive.Set(.25);
				autoLoopCounter++;
			}
			//drive forward
			else if (autoLoopCounter >= pivotLeft && autoLoopCounter <driveForwardLong){
				leftClaw.Set(0);
				rightClaw.Set(0);
				frontLeftDrive.Set(-.25);
				frontRightDrive.Set(.25);
				backLeftDrive.Set(.25);
				backRightDrive.Set(-.25);
				autoLoopCounter++;
			}
			//drop stuff
			else if (autoLoopCounter >= driveForwardLong && autoLoopCounter < claws){
				leftClaw.Set(-.25);
				rightClaw.Set(-.25);
				frontLeftDrive.Set(0);
				frontRightDrive.Set(0);
				backLeftDrive.Set(0);
				backRightDrive.Set(0);
				autoLoopCounter++;
			}
			//sit still
			else {
				leftClaw.Set(0);
				rightClaw.Set(0);
				frontLeftDrive.Set(0);
				frontRightDrive.Set(0);
				backLeftDrive.Set(0);
				backRightDrive.Set(0);
				autoLoopCounter++;
			}
			}
		else if (functionNumber == 3){

			/***************************************THIRD FUNCTION**********************************************/
			//pick up tote and bring to auto zone
			if (autoLoopCounter < claws){
				leftClaw.Set(.25);
				rightClaw.Set(.25);
				frontLeftDrive.Set(0);
				frontRightDrive.Set(0);
				backLeftDrive.Set(0);
				backRightDrive.Set(0);
				autoLoopCounter++;
			}
			//pick up
			else if (autoLoopCounter >= claws && autoLoopCounter < claws){
				leftClaw.Set(-.25);
				rightClaw.Set(-.25);
				frontLeftDrive.Set(0);
				frontRightDrive.Set(0);
				backLeftDrive.Set(0);
				backRightDrive.Set(0);
				autoLoopCounter++;
			}
			//pivot
			else if (autoLoopCounter >= claws && autoLoopCounter < pivotLeft){
				leftClaw.Set(0);
				rightClaw.Set(0);
				frontLeftDrive.Set(.25);
				frontRightDrive.Set(.25);
				backLeftDrive.Set(.25);
				backRightDrive.Set(.25);
				autoLoopCounter++;
			}
			//drive forward
			else if (autoLoopCounter >= pivotLeft && autoLoopCounter < driveForwardLong){
				leftClaw.Set(0);
				rightClaw.Set(0);
				frontLeftDrive.Set(-.25);
				frontRightDrive.Set(.25);
				backLeftDrive.Set(.25);
				backRightDrive.Set(-.25);
				autoLoopCounter++;
			}
			//drop stuff
			else if (autoLoopCounter >= driveForwardLong && autoLoopCounter < claws){
				leftClaw.Set(-.25);
				rightClaw.Set(-.25);
				frontLeftDrive.Set(0);
				frontRightDrive.Set(0);
				backLeftDrive.Set(0);
				backRightDrive.Set(0);
				autoLoopCounter++;
			}
			//sit still
			else {
				leftClaw.Set(0);
				rightClaw.Set(0);
				frontLeftDrive.Set(0);
				frontRightDrive.Set(0);
				backLeftDrive.Set(0);
				backRightDrive.Set(0);
				autoLoopCounter++;
			}
		}
		else if (functionNumber == 4){
				/***************************************FOURTH FUNCTION**********************************************/
			//pick up bin and bring to auto zone
			if (autoLoopCounter < claws){
				leftClaw.Set(.25);
				rightClaw.Set(.25);
				frontLeftDrive.Set(0);
				frontRightDrive.Set(0);
				backLeftDrive.Set(0);
				backRightDrive.Set(0);
				autoLoopCounter++;
			}
			//pick up
			else if (autoLoopCounter >= claws && autoLoopCounter < claws){
				leftClaw.Set(-.25);
				rightClaw.Set(-.25);
				frontLeftDrive.Set(0);
				frontRightDrive.Set(0);
				backLeftDrive.Set(0);
				backRightDrive.Set(0);
				autoLoopCounter++;
			}
			//pivot
			else if (autoLoopCounter >= claws && autoLoopCounter < pivotRight){
				leftClaw.Set(0);
				rightClaw.Set(0);
				frontLeftDrive.Set(-.25);
				frontRightDrive.Set(-.25);
				backLeftDrive.Set(-.25);
				backRightDrive.Set(-.25);
				autoLoopCounter++;
			}
			//drive forward
			else if (autoLoopCounter >= pivotRight && autoLoopCounter < driveForwardLong){
				leftClaw.Set(0);
				rightClaw.Set(0);
				frontLeftDrive.Set(-.25);
				frontRightDrive.Set(.25);
				backLeftDrive.Set(.25);
				backRightDrive.Set(-.25);
				autoLoopCounter++;
			}
			//drop stuff
			else if (autoLoopCounter >= driveForwardLong && autoLoopCounter < claws){
				leftClaw.Set(-.25);
				rightClaw.Set(-.25);
				frontLeftDrive.Set(0);
				frontRightDrive.Set(0);
				backLeftDrive.Set(0);
				backRightDrive.Set(0);
				autoLoopCounter++;
			}
			//sit still
			else {
				leftClaw.Set(0);
				rightClaw.Set(0);
				frontLeftDrive.Set(0);
				frontRightDrive.Set(0);
				backLeftDrive.Set(0);
				backRightDrive.Set(0);
				autoLoopCounter++;
			}
		}
		else if (functionNumber == 0) {
			leftClaw.Set(0);
			rightClaw.Set(0);
			frontLeftDrive.Set(0);
			frontRightDrive.Set(0);
			backLeftDrive.Set(0);
			backRightDrive.Set(0);
			autoLoopCounter++;
		}
	}

	void TeleopInit()
	{

	}

	void TeleopPeriodic()
	{
		//variables that control the speed of the motors on each side, because we are running tank drive, we only need two
		float driveLeft = driveStick.GetRawAxis(1);
		float driveRight = driveStick.GetRawAxis(3);

		//divide by 2 so that we don't go too fast.  Also allows us to enable slow and fast modes
		driveLeft = driveLeft/2;
		driveRight = driveRight/2;

		//allows us to control the claws using axes so that we have manual control over them
		float clawMoveLeft = buttonStick.GetRawAxis(1);
		float clawMoveRight = buttonStick.GetRawAxis(3);

		//true or false to push the  solenoids in or out
		if(buttonStick.GetRawButton(7)){
			solenoid1.Set(DoubleSolenoid::kForward);
			solenoid2.Set(DoubleSolenoid::kForward);
		}
		else if (buttonStick.GetRawButton(8)){
			solenoid1.Set(DoubleSolenoid::kReverse);
			solenoid2.Set(DoubleSolenoid::kReverse);
		}
		else {
			solenoid1.Set(DoubleSolenoid::kOff);
			solenoid2.Set(DoubleSolenoid::kOff);
		}

		//true or false variables that allow us to change the speed when the buttons are held down
		bool slow = driveStick.GetRawButton(5);
		bool fast = driveStick.GetRawButton(6);
		//an if, else if statement that controls when the boolean buttons are pressed so that we can change the driving speeds
		if (slow){
			driveLeft = driveLeft/2;
			driveRight = driveRight/2;
		}
		else if (fast){
			driveLeft = driveLeft*2;
			driveRight = driveRight*2;
		}

		//if statement for the limit switches that make sure that all ball screws are moving at the same rate
		if (topLeftSwitch->Get() == 1 && topRightSwitch->Get() == 0){
			clawMoveLeft = 0;
			clawMoveRight = .25;
		}
		else if (topLeftSwitch->Get() == 0 && topRightSwitch->Get() == 1) {
			clawMoveLeft = .25;
			clawMoveRight = 0;
		}
		else if (topLeftSwitch->Get() == 1 && topRightSwitch->Get() == 1){
			leftClaw.Set(0);
			rightClaw.Set(0);
			Wait(0.005);
			leftClaw.Set(-.25);
			rightClaw.Set(-.25);
			Wait(0.005);
			clawMoveLeft = 0;
			clawMoveRight = 0;
		}
		else if (bottomLeftSwitch->Get() == 1 && bottomRightSwitch->Get() == 0){
			clawMoveLeft = 0;
			clawMoveRight = -.25;
		}
		else if (bottomLeftSwitch->Get() == 0 && bottomRightSwitch->Get() == 1) {
			clawMoveLeft = -.25;
			clawMoveRight = 0;
		}
		else if (bottomLeftSwitch->Get() == 1 && bottomRightSwitch->Get() == 1){
			leftClaw.Set(0);
			rightClaw.Set(0);
			Wait(0.005);
			leftClaw.Set(.25);
			rightClaw.Set(.25);
			Wait(0.005);
			clawMoveLeft = 0;
			clawMoveRight = 0;
		}


		//individually set all the motors with values because we do not have chains so we can't use the tank drive functions
		frontLeftDrive.Set(-driveLeft);
		frontRightDrive.Set(driveRight);
		backLeftDrive.Set(driveLeft);
		backRightDrive.Set(-driveRight);

		//set values of claw motors so that they can be controlled independently
		/*****************************************ONE OF THESE WILL HAVE TO BE NEGATIVE*****************************************/
		leftClaw.Set(-clawMoveLeft);
		rightClaw.Set(clawMoveRight);

	}

	void TestPeriodic()
	{
		lw->Run();
	}
};

START_ROBOT_CLASS(Robot);

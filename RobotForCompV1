#include "WPILib.h"

class Robot: public IterativeRobot
{
	//list of motors being used for driving
	CANTalon frontLeftDrive;
	CANTalon frontRightDrive;
	CANTalon backLeftDrive;
	CANTalon backRightDrive;

	//the variable that controls the robot drive
	RobotDrive myRobot; // robot drive system

	//2 joysticks are used in competition
	Joystick buttonStick;
	Joystick driveStick; // only joystick


	LiveWindow *lw;
	int autoLoopCounter;

public:
	Robot() :
		//use commas here and initiate them in the same order as above
		frontLeftDrive(56), //56
		frontRightDrive(52), //52
		backLeftDrive(57),
		backRightDrive(53),

		myRobot(0, 1),

		buttonStick(0),
		driveStick(1),

		lw(NULL),
		autoLoopCounter(0)

	{
		myRobot.SetExpiration(0.1);
	}

private:
	void RobotInit()
	{
		lw = LiveWindow::GetInstance();
	}

	void AutonomousInit()
	{
		autoLoopCounter = 0;
	}

	void AutonomousPeriodic()
	{
		if(autoLoopCounter < 100) //Check if we've completed 100 loops (approximately 2 seconds)
		{
			myRobot.Drive(-0.5, 0.0); 	// drive forwards half speed
			autoLoopCounter++;
			} else {
			myRobot.Drive(0.0, 0.0); 	// stop robot
		}
	}

	void TeleopInit()
	{

	}

	void TeleopPeriodic()
	{
		//variables that control the speed of the motors on each side, because we are running tank drive, we only need two
		float driveLeft = driveStick.GetRawAxis(1);
		float driveRight = driveStick.GetRawAxis(3);

		//we are capping them at a maximum speed now so that no one hurts the robot
		driveLeft = driveLeft/2;
		driveRight = driveRight/2;

		//true or false variables that allow us to change the speed when the buttons are held down
		bool slow = driveStick.GetRawButton(5);
		bool fast = driveStick.GetRawButton(6);

		//an if, else if statement that controls when the boolean buttons are pressed so that we can change the driving speeds
		if (slow){
			driveLeft = driveLeft/2;
			driveRight = driveRight/2;
		}
		else if (fast){
			driveLeft = driveLeft*2;
			driveRight = driveRight*2;
		}

		//individually set all the motors with values because we do not have chains so we can't use the tank drive functions
		frontLeftDrive.Set(-driveLeft);
		frontRightDrive.Set(driveRight);
		backLeftDrive.Set(driveLeft);
		backRightDrive.Set(-driveRight);


	}

	void TestPeriodic()
	{
		lw->Run();
	}
};

START_ROBOT_CLASS(Robot);
